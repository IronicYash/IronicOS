name: Build & Test IronicOS

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache cross-compiler
        id: cache-cross
        uses: actions/cache@v3
        with:
          path: ~/opt/cross
          key: cross-compiler-${{ runner.os }}-v1

      - name: Install apt packages (dev + runtime)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential bison flex libgmp3-dev libmpc-dev libmpfr-dev \
            texinfo nasm unzip wget curl xorriso grub-pc-bin mtools \
            qemu-system-i386 make rsync

      - name: Download prebuilt cross-compiler (if not cached)
        if: steps.cache-cross.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
          mkdir -p "$HOME/opt/cross"
          cd "$HOME/opt/cross"

          echo "Attempting to install lordmilko 13.2.0 ZIP..."
          if wget -q -O /tmp/i686-toolchain.zip "https://github.com/lordmilko/i686-elf-tools/releases/download/13.2.0/i686-elf-tools-linux.zip"; then
            unzip -q /tmp/i686-toolchain.zip -d /tmp/i686-toolchain
            rsync -a /tmp/i686-toolchain/ "$HOME/opt/cross/"
            rm -rf /tmp/i686-toolchain /tmp/i686-toolchain.zip
            echo "Installed lordmilko toolchain"
          else
            echo "lordmilko zip failed; trying cfenollosa tarball..."
            if wget -q -O /tmp/i686-toolchain.tar.gz "https://github.com/cfenollosa/os-tutorial/releases/download/cc1/i686-elf-tools.tar.gz"; then
              tar -xzf /tmp/i686-toolchain.tar.gz --strip-components=1 -C "$HOME/opt/cross"
              rm -f /tmp/i686-toolchain.tar.gz
              echo "Installed cfenollosa toolchain"
            else
              echo "ERROR: No prebuilt toolchain available from known sources."
              exit 1
            fi
          fi

      - name: Expose toolchain bin to PATH (always)
        run: |
          set -euo pipefail
          if [ -d "$HOME/opt/cross/bin" ]; then
            echo "$HOME/opt/cross/bin" >> $GITHUB_PATH
            echo "Appended $HOME/opt/cross/bin to GITHUB_PATH"
          else
            echo "Note: $HOME/opt/cross/bin does not exist (cache may be empty or download failed)."
            echo "Listing $HOME/opt and $HOME/opt/cross for debugging:"
            ls -la "$HOME/opt" || true
            ls -la "$HOME/opt/cross" || true
          fi

      - name: Verify cross toolchain
        run: |
          set -euo pipefail
          echo "Checking i686-elf-gcc availability..."
          if command -v i686-elf-gcc >/dev/null 2>&1; then
            echo "i686-elf-gcc found: $(i686-elf-gcc --version | head -n1)"
          else
            echo "ERROR: i686-elf-gcc not found on PATH. Dumping debug info..."
            echo "PATH=$PATH"
            echo "--- ls $HOME/opt/cross/bin ---"
            ls -la "$HOME/opt/cross/bin" || true
            echo "--- find $HOME/opt/cross -maxdepth 2 -type f -executable ---"
            find "$HOME/opt/cross" -maxdepth 2 -type f -executable -ls || true
            exit 1
          fi

      - name: Build kernel & create ISO
        run: |
          set -euo pipefail
          make CROSS_PREFIX="$HOME/opt/cross/bin/i686-elf-"
          make iso
          ls -lh IronicOS.iso || true

      - name: QEMU boot test (capture serial log & fail if no boot message)
        run: |
          set -euo pipefail
          rm -f qemu_serial.log || true
          echo "Starting QEMU (serial -> qemu_serial.log)..."
          qemu-system-i386 -cdrom IronicOS.iso -serial file:qemu_serial.log -display none -m 256M -boot d -no-reboot -no-shutdown &
          QEMU_PID=$!
          sleep 6
          echo "=== BEGIN SERIAL LOG ==="
          sed -n '1,200p' qemu_serial.log || true
          echo "=== END SERIAL LOG ==="
          if grep -q "Booting IronicOS" qemu_serial.log; then
            echo "Boot message found."
          else
            echo "ERROR: 'Booting IronicOS' not found in serial log."
            cat qemu_serial.log || true
            kill $QEMU_PID >/dev/null 2>&1 || true
            exit 1
          fi
          kill $QEMU_PID >/dev/null 2>&1 || true

      - name: Upload artifacts (ISO + serial log)
        uses: actions/upload-artifact@v4
        with:
          name: ironic-os-artifacts
          path: |
            IronicOS.iso
            qemu_serial.log
