name: Build and Test IronicOS

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y nasm qemu-system-x86

      - name: Set up cross-compiler (cached)
        uses: actions/cache@v4
        with:
          path: ~/opt/cross
          key: cross-compiler-i686-elf-v1
        id: cache-cross

      - name: Build cross-compiler (if not cached)
        if: steps.cache-cross.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/opt
          cd /tmp
          wget https://ftp.gnu.org/gnu/binutils/binutils-2.41.tar.gz
          tar -xzf binutils-2.41.tar.gz
          mkdir binutils-build && cd binutils-build
          ../binutils-2.41/configure --target=i686-elf --prefix=$HOME/opt/cross --disable-nls --disable-werror
          make -j$(nproc)
          make install
          cd /tmp
          wget https://ftp.gnu.org/gnu/gcc/gcc-13.2.0/gcc-13.2.0.tar.gz
          tar -xzf gcc-13.2.0.tar.gz
          mkdir gcc-build && cd gcc-build
          ../gcc-13.2.0/configure --target=i686-elf --prefix=$HOME/opt/cross --disable-nls --enable-languages=c --without-headers
          make all-gcc -j$(nproc)
          make all-target-libgcc -j$(nproc)
          make install-gcc
          make install-target-libgcc

      - name: Build kernel
        run: |
          export PATH="$HOME/opt/cross/bin:$PATH"
          make CROSS_PREFIX="$HOME/opt/cross/bin/i686-elf-"

      - name: Run kernel in QEMU and capture serial log
        run: |
          echo "=== QEMU SERIAL OUTPUT START ==="
          qemu-system-i386 -kernel build/kernel.elf -serial stdio -display none -no-reboot -no-shutdown
          echo "=== QEMU SERIAL OUTPUT END ==="
